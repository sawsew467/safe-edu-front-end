import OpenAI from "openai";

import { searchInCollection } from "@/services/qdrant/actions";

const client = new OpenAI();

export const maxDuration = 30;

export async function OPTIONS() {
  return new Response(null, {
    status: 204,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
    },
  });
}

const findKnowledgeTool = {
  name: "findKnowledgeTool",
  description:
    "T√¨m ki·∫øm ki·∫øn th·ª©c ch√≠nh th·ªëng ph√π h·ª£p v·ªõi m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng",
  parameters: {
    type: "object",
    properties: {
      query: {
        type: "string",
        description: "M√¥ t·∫£ c√¢u h·ªèi m√† ng∆∞·ªùi d√πng ƒëang t√¨m",
      },
    },
    required: ["query"],
  },
};

const findConsultingTool = {
  name: "findConsultingTool",
  description:
    "T√¨m ki·∫øm th√¥ng tin v·ªÅ t∆∞ v·∫•n t√¢m l√Ω ph√π h·ª£p v·ªõi m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng",
  parameters: {
    type: "object",
    properties: {
      query: {
        type: "string",
        description: "M√¥ t·∫£ c√¢u h·ªèi m√† ng∆∞·ªùi d√πng ƒëang t√¨m",
      },
    },
    required: ["query"],
  },
};

async function executeFindKnowledgeTool({ query }: { query: string }) {
  try {
    const results: any = await searchInCollection("knowledge", query);

    // Check if search was successful and results is an array
    if (
      !results ||
      !Array.isArray(results) ||
      (results as any).success === false
    ) {
      return "Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p.";
    }

    const filteredResults = results.filter((res: any) => res.score >= 0.3);

    if (!filteredResults || filteredResults.length === 0) {
      return "Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p.";
    }

    return filteredResults
      .slice(0, 5)
      .map((res: any) => {
        return `üìÑ [${res.payload.document_name}](${res.payload.file_url})\n\nLo·∫°i t√†i li·ªáu: ${res.payload.type === "OFFICIAL" ? "Ch√≠nh th·ªëng" : "Tham kh·∫£o"}\n\n${res.payload.content}`;
      })
      .join("\n\n");
  } catch {
    return "Kh√¥ng th·ªÉ t√¨m ki·∫øm ki·∫øn th·ª©c l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
}

async function executeFindConsultingTool({ query }: { query: string }) {
  try {
    const results: any = await searchInCollection("consulting", query);

    // Check if search was successful and results is an array
    if (
      !results ||
      !Array.isArray(results) ||
      (results as any).success === false
    ) {
      return "Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p.";
    }

    const filteredResults = results.filter((res: any) => res.score >= 0.3);

    if (!filteredResults || filteredResults.length === 0) {
      return "Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p.";
    }

    return filteredResults
      .slice(0, 5)
      .map((res: any, i: number) => {
        return `Th√¥ng tin tham kh·∫£o ${i + 1}: ${res.payload.content}\n\n`;
      })
      .join("\n\n");
  } catch {
    return "Kh√¥ng th·ªÉ t√¨m ki·∫øm th√¥ng tin t∆∞ v·∫•n l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
}

export async function POST(req: Request) {
  const { messages } = await req.json();

  const systemMessage = {
    role: "system",
    content: `
üö® QUY T·∫ÆC GI·ªöI H·∫†N CH·ª¶ ƒê·ªÄ TUY·ªÜT ƒê·ªêI
- CH·ªà tr·∫£ l·ªùi c√°c ch·ªß ƒë·ªÅ: B·∫†O L·ª∞C H·ªåC ƒê∆Ø·ªúNG, MA T√öY, B√åNH ƒê·∫≤NG GI·ªöI
- V·ªõi m·ªçi ch·ªß ƒë·ªÅ kh√°c: "Xin l·ªói, m√¨nh ch·ªâ h·ªó tr·ª£ c√°c v·∫•n ƒë·ªÅ v·ªÅ b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng, ma t√∫y v√† b√¨nh ƒë·∫≥ng gi·ªõi. B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªÅ nh·ªØng ch·ªß ƒë·ªÅ n√†y kh√¥ng?"
- LU√îN ki·ªÉm tra c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn 3 ch·ªß ƒë·ªÅ tr√™n TR∆Ø·ªöC KHI ph·∫£n h·ªìi

‚ùóÔ∏èQUY T·∫ÆC ∆ØU TI√äN TOOL
- N·∫øu ng∆∞·ªùi d√πng ƒëang g·∫∑p kh√≥ khƒÉn, lo √¢u, ho·∫∑c c·∫ßn chia s·∫ª: PH·∫¢I g·ªçi tool \`findConsultingTool\` TR∆Ø·ªöC.
- Ch·ªâ g·ªçi \`findKnowledgeTool\` khi ng∆∞·ªùi d√πng c·∫ßn tra c·ª©u th√¥ng tin ch√≠nh th·ªëng, d·∫°ng l√Ω thuy·∫øt nh∆∞ "ma t√∫y l√† g√¨?", "lu·∫≠t n√†o quy ƒë·ªãnh...".
- TUY·ªÜT ƒê·ªêI KH√îNG d√πng ki·∫øn th·ª©c n·ªôi t·∫°i c·ªßa AI ƒë·ªÉ tr·∫£ l·ªùi thay th·∫ø t√†i li·ªáu ch√≠nh th·ªëng.

---

üéØ VAI TR√í & S·ª® M·ªÜNH
B·∫°n l√† SafeEdu AI ‚Äì ng∆∞·ªùi b·∫°n tinh t·∫ø trong b√≥ng t·ªëi c·ªßa nh·ªØng kh·ªßng ho·∫£ng tu·ªïi tr·∫ª. B·∫°n hi·ªán di·ªán ƒë·ªÉ:
- An ·ªßi, th·∫•u c·∫£m v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng v∆∞·ª£t qua: b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng, nghi·ªán ng·∫≠p, b·∫•t b√¨nh ƒë·∫≥ng gi·ªõi.
- Lu√¥n t·ª≠ t·∫ø, kh√¥ng ph√°n x√©t, lu√¥n trao quy·ªÅn v√† t√¥n tr·ªçng quy·ªÅn ri√™ng t∆∞ tuy·ªát ƒë·ªëi.

---

üß≠ QUY TR√åNH B·∫ÆT BU·ªòC: TH·∫§U C·∫¢M ‚Üí H∆Ø·ªöNG D·∫™N ‚Üí H√ÄNH ƒê·ªòNG
1. **TH·∫§U C·∫¢M:** Lu√¥n m·ªü ƒë·∫ßu b·∫±ng s·ª± c√¥ng nh·∫≠n c·∫£m x√∫c ng∆∞·ªùi d√πng.
   - V√≠ d·ª•: "M√¨nh hi·ªÉu b·∫°n ƒëang r·∫•t ƒëau kh·ªï v√† c√¥ ƒë∆°n. M√¨nh ·ªü ƒë√¢y r·ªìi, kh√¥ng sao c·∫£..."

2. **H∆Ø·ªöNG D·∫™N:** ƒê·∫∑t c√¢u h·ªèi nh·∫π nh√†ng ƒë·ªÉ hi·ªÉu th√™m t√¨nh hu·ªëng. G·ª£i √Ω t√¨m hi·ªÉu th√™m.
   - V√≠ d·ª•: "B·∫°n c√≥ th·ªÉ chia s·∫ª c·ª• th·ªÉ h∆°n v·ªÅ chuy·ªán v·ª´a x·∫£y ra kh√¥ng?", "B·∫°n c√≥ mu·ªën m√¨nh h·ªó tr·ª£ v·ªÅ 'k·ªπ nƒÉng b·∫£o v·ªá b·∫£n th√¢n' kh√¥ng?"

3. **H√ÄNH ƒê·ªòNG:** ƒê·ªÅ xu·∫•t gi·∫£i ph√°p r√µ r√†ng, th·ª±c hi·ªán ƒë∆∞·ª£c ngay c·∫£ khi ng∆∞·ªùi d√πng ƒëang ho·∫£ng lo·∫°n.
   - V√≠ d·ª•: "Gi·∫£i ph√°p n·∫Øm b·∫Øt nhanh: 1. H√≠t th·ªü s√¢u 2. Vi·∫øt ra gi·∫•y 3. Nh·∫Øn cho SafeEdu."

---

üìö S·ª¨ D·ª§NG TOOL
- Lu√¥n g·ªçi \`findConsultingTool\` tr∆∞·ªõc ƒë·ªÉ t√¨m t∆∞ v·∫•n ph√π h·ª£p.
- Ch·ªâ d√πng \`findKnowledgeTool\` n·∫øu c√¢u h·ªèi y√™u c·∫ßu ki·∫øn th·ª©c ch√≠nh th·ªëng.
- N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c t√†i li·ªáu: ph·∫£n h·ªìi l·ªãch s·ª± v√† m·ªùi ng∆∞·ªùi d√πng m√¥ t·∫£ k·ªπ h∆°n.

üìå C√°ch tr√≠ch d·∫´n ch√≠nh th·ªëng:
‚Üí *"Theo [T√™n t√†i li·ªáu](URL)"*

üõë Kh√¥ng d√πng ki·∫øn th·ª©c ng√¥n ng·ªØ m√¥ h√¨nh ƒë·ªÉ tr·∫£ l·ªùi n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ch√≠nh th·ªëng t·ª´ \`findKnowledgeTool\`.

---

üß† CH·ª¶ ƒê·ªÄ ƒê∆Ø·ª¢C PH√âP H·ªñ TR·ª¢
- **B·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng:** b·∫Øt n·∫°t, ƒë√°nh nhau, qu·∫•y r·ªëi, k·ª≥ th·ªã, c√°ch t·ª± v·ªá, b√°o c√°o
- **Ma t√∫y:** d·∫•u hi·ªáu s·ª≠ d·ª•ng, t√°c h·∫°i, cai nghi·ªán, ph√≤ng ch·ªëng, ph√°p l√Ω
- **B√¨nh ƒë·∫≥ng gi·ªõi:** ph√¢n bi·ªát ƒë·ªëi x·ª≠, qu·∫•y r·ªëi t√¨nh d·ª•c, b·∫°o l·ª±c gia ƒë√¨nh, quy·ªÅn b√¨nh ƒë·∫≥ng

üö® HOTLINE KH·∫®N C·∫§P CHO C√ÅC TR∆Ø·ªúNG H·ª¢P NGHI√äM TR·ªåNG
Khi g·∫∑p t√¨nh hu·ªëng NGHI√äM TR·ªåNG (b·∫°o l·ª±c, t·ª± t·ª≠, nghi·ªán n·∫∑ng), NGAY L·∫¨P T·ª®C cung c·∫•p hotline:

üìû **HOTLINE KH·∫®N C·∫§P:**
‚Ä¢ **111** - ƒê∆∞·ªùng d√¢y n√≥ng b·∫£o v·ªá tr·∫ª em (24/7)
‚Ä¢ **113** - C√¥ng an (kh·∫©n c·∫•p)
‚Ä¢ **115** - C·∫•p c·ª©u y t·∫ø (kh·∫©n c·∫•p)
‚Ä¢ **1900.969.603** - T∆∞ v·∫•n cai nghi·ªán ma t√∫y
‚Ä¢ **1080** - ƒê∆∞·ªùng d√¢y n√≥ng t∆∞ v·∫•n t√¢m l√Ω (7h-22h)

üìã **C√ÅC C∆† QUAN H·ªñ TR·ª¢:**
‚Ä¢ **Ph√≤ng GD&ƒêT** - B√°o c√°o b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng
‚Ä¢ **UBND ph∆∞·ªùng/x√£** - H·ªó tr·ª£ ƒë·ªãa ph∆∞∆°ng
‚Ä¢ **Trung t√¢m Y t·∫ø** - H·ªó tr·ª£ y t·∫ø v√† t√¢m l√Ω
‚Ä¢ **H·ªôi Ph·ª• n·ªØ** - H·ªó tr·ª£ b√¨nh ƒë·∫≥ng gi·ªõi

---

üîê B·∫¢O M·∫¨T & GI·ªöI H·∫†N
- SafeEdu AI cam k·∫øt b·∫£o m·∫≠t tuy·ªát ƒë·ªëi. "B·∫°n ho√†n to√†n c√≥ th·ªÉ y√™n t√¢m. M·ªçi th√¥ng tin ƒë·ªÅu ƒë∆∞·ª£c m√£ h√≥a."
- B·∫°n l√† AI h·ªó tr·ª£ ƒë·∫ßu ti√™n, kh√¥ng thay th·∫ø ƒë∆∞·ª£c chuy√™n gia. Lu√¥n khuy·∫øn kh√≠ch k·∫øt n·ªëi v·ªõi ng∆∞·ªùi th·∫≠t: ng∆∞·ªùi l·ªõn ƒë√°ng tin, b√°c sƒ©, chuy√™n vi√™n t√¢m l√Ω.
- N·∫øu c√≥ nguy c∆° ƒëe d·ªça t√≠nh m·∫°ng: l·∫≠p t·ª©c h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng g·ªçi hotline kh·∫©n c·∫•p v√† nh·ªù ng∆∞·ªùi l·ªõn gi√∫p ƒë·ª°.

---

üí¨ PHONG C√ÅCH TR·∫¢ L·ªúI
- Ng·∫Øn g·ªçn, r√µ r√†ng, ph√π h·ª£p h·ªçc sinh
- Lu√¥n h·ªó tr·ª£, an ·ªßi, truy·ªÅn ƒë·ªông l·ª±c
- Kh√¥ng d√πng t·ª´ ng·ªØ chuy√™n m√¥n ph·ª©c t·∫°p
- D·∫°ng markdown, d·ªÖ ƒë·ªçc
  `,
  };

  const chatCompletionResponse = await client.chat.completions.create({
    model: "gpt-4o",
    messages: [systemMessage, ...messages],
    tools: [
      { type: "function", function: findKnowledgeTool },
      { type: "function", function: findConsultingTool },
    ],
    tool_choice: "auto",
  });

  const chatCompletionResult = chatCompletionResponse.choices[0];

  if (chatCompletionResult.finish_reason === "tool_calls") {
    const toolCalls: any = chatCompletionResult.message.tool_calls;

    const toolResponses = await Promise.all(
      toolCalls.map(async (toolCall: any) => {
        const { name, arguments: rawArgs } = toolCall.function;
        const args = JSON.parse(rawArgs);

        if (name === "findKnowledgeTool") {
          const output = await executeFindKnowledgeTool(args);

          return {
            tool_call_id: toolCall.id,
            output,
          };
        }

        if (name === "findConsultingTool") {
          const output = await executeFindConsultingTool(args);

          return {
            tool_call_id: toolCall.id,
            output,
          };
        }

        return {
          tool_call_id: toolCall.id,
          output: "C√¥ng c·ª• kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.",
        };
      }),
    );

    const secondResponse = await client.chat.completions.create({
      model: "gpt-4o",
      messages: [
        systemMessage,
        ...messages,
        {
          role: "assistant",
          tool_calls: chatCompletionResult.message.tool_calls,
        },
        ...toolResponses.map((res) => ({
          role: "tool",
          tool_call_id: res.tool_call_id,
          content: res.output,
        })),
      ],
    });

    return new Response(JSON.stringify(secondResponse), {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
    });
  }

  return new Response(
    JSON.stringify({
      content: chatCompletionResult.message.content ?? "Kh√¥ng c√≥ ph·∫£n h·ªìi",
    }),
    {
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Content-Type": "application/json",
      },
    },
  );

  // const formattedMessages = messages.map((msg: any) => {
  //   return {
  //     role: msg.role,
  //     content: msg.content,
  //   };
  // });

  // const imageBlocks = images.map((img: any) => ({
  //   role: "user",
  //   content: [
  //     {
  //       type: "text",
  //       text: "H√¨nh ·∫£nh ƒë√≠nh k√®m. H√£y ph√¢n t√≠ch ·∫£nh n√†y li√™n quan ƒë·∫øn b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng, ma t√∫y ho·∫∑c b√¨nh ƒë·∫≥ng gi·ªõi.",
  //     },
  //     {
  //       type: "image_url",
  //       image_url: {
  //         url: img.url,
  //       },
  //     },
  //   ],
  // }));

  // const response = await client.chat.completions.create({
  //   model: "gpt-4o",
  //   messages: [systemMessage, ...formattedMessages, ...imageBlocks],
  // });

  // const result = response.choices[0];

  // return new Response(
  //   JSON.stringify({
  //     content: result.message.content ?? "Kh√¥ng c√≥ ph·∫£n h·ªìi",
  //   }),
  //   {
  //     headers: {
  //       "Access-Control-Allow-Origin": "*",
  //       "Content-Type": "application/json",
  //     },
  //   }
  // );
}
